#!/usr/bin/env zsh
help() {
    cat >&1 <<END
Usage: $0 [file1 options] file1 [[file2 options] file2] ...
Options:
    o bitrate   - use opus for audio
    f		- owerwriting files
	    (othervise conversion with existing results will be skipped)
	    w width	- scale destination video to given width (default-400)
    s start	- start of needle fragment in source video
    t length	- duration of fragment
    b		- use "best" quality setting
Options for previous files used as defaults for next.
END
    exit 1
}
set -e
source $(dirname $0)/.zshrc.avenc
opts=(-auto-alt-ref 1 -lag-in-frames 16)
aopts=()
vopts=()
iopts=()
force=0
aopts=(-q:a 2)
width=400
fsize=6144
fpg=(ffmpeg -hide_banner)
while [[ ! -z $1 ]]
do
    while getopts "o:fw:s:t:" o
    do
        case $o in
            o)  aopts=(-c:a libopus -b:a "${OPTARG}k")
                ;;
            f)  force=1
                ;;
            w)  width=$OPTARG
                ;;
            s)  iopts+=(-ss $OPTARG)
                ;;
            t)  opts+=(-t $OPTARG)
                length=$OPTARG
                ;;
            b)  opts+=(-quality best)
                ;;
	    h)  help
		;;
            
        esac
    done
    shift $((OPTIND - 1))
    [[ -z $1 ]] && help
    f=$1
    of="${$(basename $f)%.*}.webm"
    [[ $of == $f ]] && of=${f/webm/converted.webm}
    af=${of/webm/audio.webm}
    if ! ((force)) && [ -f $of ]
    then
        shift
        continue
    fi
    ((length)) || length=$(ffprobe $f 2>&1|sed -n 's/.*Duration: \([^,]\+\),.*/\1/p')
    [ -f $af ] && ! ((force)) || 
    $fpg $iopts -i $f $opts -vf scale=$width:-1 -pass 1 $aopts -strict -2 -y $af || break
    audio_size=$(( $(stat -c %s $af) / 1024 ))
    $fpg $iopts -i $f -i $af $opts -map 0:v -map 1:a \
        -strict -2 \
        -c:a copy \
        -vf scale=$width:-1 \
        -b:v $(hkbr $length $audio_size $fsize) \
        -pass 2 -y $of || break 2
    [[ $(stat -c %s $of) -le $((fsize * 1024)) ]] && rm $af || echo "$of is too big"
    shift
done
